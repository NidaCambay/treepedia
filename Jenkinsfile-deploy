pipeline {
  agent any

  environment {
    IMAGE_NAME = 'nidacambay/treepedia-site'
    REGION = 'us-east-1'
    AMI_ID = 'ami-0d59d17fb3b322d0b'
    INSTANCE_TYPE = 't2.micro'
    KEY_NAME = 'firstkey'
    SECURITY_GROUP_NAME = 'treepedia-sg'
  }

  stages {

    stage('üîß Docker Image Build Et') {
      steps {
        echo "[üîß] Koddan Docker image olu≈üturuluyor..."
        sh 'docker build -t $IMAGE_NAME .'
      }
    }

    stage('üì¶ Docker Hub‚Äôa Push Et') {
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')
        ]) {
          echo "[üîê] Docker Hub‚Äôa giri≈ü yapƒ±lƒ±yor..."
          sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $IMAGE_NAME
          '''
        }
      }
    }

    stage('üöÄ EC2 Ba≈ülat ve Yayƒ±na Al') {
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']
        ]) {
          echo "[üåê] AWS eri≈üimi saƒülandƒ±. EC2 instance ba≈ülatƒ±lƒ±yor..."

          sh '''
            echo "[üåç] Varsayƒ±lan VPC alƒ±nƒ±yor..."
            DEFAULT_VPC_ID=$(aws ec2 describe-vpcs --region $REGION \
              --filters Name=isDefault,Values=true \
              --query 'Vpcs[0].VpcId' --output text)

            echo "[üõ°Ô∏è] G√ºvenlik grubu kontrol ediliyor..."
            SG_ID=$(aws ec2 describe-security-groups --region $REGION \
              --filters Name=group-name,Values=$SECURITY_GROUP_NAME Name=vpc-id,Values=$DEFAULT_VPC_ID \
              --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null)

            if [ -z "$SG_ID" ] || [ "$SG_ID" = "None" ]; then
              echo "[üìê] Yeni g√ºvenlik grubu olu≈üturuluyor..."
              SG_ID=$(aws ec2 create-security-group \
                --group-name $SECURITY_GROUP_NAME \
                --description "Allow HTTP and SSH" \
                --vpc-id $DEFAULT_VPC_ID \
                --region $REGION \
                --query 'GroupId' --output text)

              aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0 --region $REGION
              aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0 --region $REGION
            else
              echo "[‚úÖ] Mevcut g√ºvenlik grubu kullanƒ±lacak: $SG_ID"
            fi

            echo "[üöÄ] EC2 ba≈ülatƒ±lƒ±yor..."
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id $AMI_ID \
              --count 1 \
              --instance-type $INSTANCE_TYPE \
              --key-name $KEY_NAME \
              --security-group-ids $SG_ID \
              --region $REGION \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=TreepediaApp}]' \
              --user-data file://userdata.sh \
              --query 'Instances[0].InstanceId' --output text)

            echo "[‚è≥] EC2 hazƒ±r olana kadar bekleniyor..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region $REGION

            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --region $REGION \
              --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)

            echo "‚úÖ Yayƒ±n tamam! Web uygulamasƒ±na eri≈üim: http://$PUBLIC_IP"
          '''
        }
      }
    }
  }
}
